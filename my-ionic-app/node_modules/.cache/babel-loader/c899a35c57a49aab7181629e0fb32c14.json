{"ast":null,"code":"var _jsxFileName = \"G:\\\\Mihnea\\\\Facultate\\\\anu 3\\\\Mobile\\\\start\\\\my-ionic-app\\\\src\\\\auth\\\\AuthProvider.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { getLogger } from '../core';\nimport { login as loginApi } from './authApi';\nimport { Storage } from \"@capacitor/storage\";\nimport { Network } from \"@capacitor/network\";\nconst log = getLogger('AuthProvider');\nconst initialState = {\n  isAuthenticated: false,\n  isAuthenticating: false,\n  authenticationError: null,\n  pendingAuthentication: false,\n  token: ''\n};\nexport const AuthContext = React.createContext(initialState);\nexport const AuthProvider = ({\n  children\n}) => {\n  const [state, setState] = useState(initialState);\n  const {\n    isAuthenticated,\n    isAuthenticating,\n    authenticationError,\n    pendingAuthentication,\n    token,\n    networkStatus\n  } = state;\n  const login = useCallback(loginCallback, []);\n  const logout = useCallback(logoutCallback, []);\n  useEffect(authenticationEffect, [pendingAuthentication]);\n  useEffect(() => {\n    function networkStatusChangedListener(status) {\n      log(\"status changed\");\n      setState({ ...state,\n        networkStatus: status.connected\n      });\n    }\n\n    log(\"useEffect\");\n    Network.addListener('networkStatusChange', networkStatusChangedListener);\n    Network.getStatus().then(networkStatusChangedListener);\n  }, [networkStatus]); //get the user from local storage, if it exists\n\n  if (!isAuthenticated) getUserFromLocalStorage();\n  const value = {\n    isAuthenticated,\n    login,\n    logout,\n    isAuthenticating,\n    authenticationError,\n    token,\n    networkStatus\n  };\n  log('render');\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, children);\n\n  function loginCallback(username, password) {\n    log('loginCallback');\n    setState({ ...state,\n      pendingAuthentication: true,\n      username,\n      password\n    });\n  }\n\n  function logoutCallback() {\n    log('logoutCallback');\n    setState({ ...state,\n      isAuthenticated: false,\n      username: undefined,\n      password: undefined,\n      token: \"\"\n    });\n\n    (async () => {\n      log(\"remove user from local storage\");\n      await Storage.clear();\n    })();\n  }\n\n  function authenticationEffect() {\n    log(\"authenticationEffect\");\n    let canceled = false;\n    authenticate();\n    return () => {\n      canceled = true;\n    };\n\n    async function authenticate() {\n      if (!pendingAuthentication) {\n        log('authenticate, !pendingAuthentication, return');\n        return;\n      }\n\n      try {\n        log('authenticate, pendingAuthentication true.');\n        setState({ ...state,\n          isAuthenticating: true\n        });\n        const {\n          username,\n          password\n        } = state;\n\n        if (!username || !password) {\n          log(\"authentication failed. Empty username or password\");\n          return;\n        }\n\n        const {\n          token\n        } = await loginApi(username, password);\n\n        if (canceled) {\n          return;\n        }\n\n        log('authenticate succeeded');\n        setState({ ...state,\n          token,\n          pendingAuthentication: false,\n          isAuthenticated: true,\n          isAuthenticating: false\n        }); // save user in storage\n\n        saveUserToLocalStorage(username, password, token);\n      } catch (error) {\n        if (canceled) {\n          return;\n        }\n\n        log('authenticate failed');\n        setState({ ...state,\n          authenticationError: error,\n          pendingAuthentication: false,\n          isAuthenticating: false\n        });\n      }\n    }\n  }\n\n  function saveUserToLocalStorage(username, password, token) {\n    (async () => {\n      log(\"save user to local storage\"); // Saving ({ key: string, value: string }) => Promise<void>\n\n      await Storage.set({\n        key: 'user',\n        value: JSON.stringify({\n          username,\n          password,\n          token\n        })\n      });\n    })();\n  }\n\n  function getUserFromLocalStorage() {\n    if (!isAuthenticated) (async () => {\n      log(\"get user from local storage\");\n      const res = await Storage.get({\n        key: 'user'\n      });\n\n      if (res && res.value) {\n        const user = JSON.parse(res.value);\n        log('User found');\n        setState({ ...state,\n          isAuthenticated: true,\n          username: user.username,\n          password: user.password,\n          token: user.token\n        });\n      } else {\n        log('User not found');\n      }\n    })();\n  }\n};","map":{"version":3,"sources":["G:/Mihnea/Facultate/anu 3/Mobile/start/my-ionic-app/src/auth/AuthProvider.tsx"],"names":["React","useCallback","useEffect","useState","getLogger","login","loginApi","Storage","Network","log","initialState","isAuthenticated","isAuthenticating","authenticationError","pendingAuthentication","token","AuthContext","createContext","AuthProvider","children","state","setState","networkStatus","loginCallback","logout","logoutCallback","authenticationEffect","networkStatusChangedListener","status","connected","addListener","getStatus","then","getUserFromLocalStorage","value","username","password","undefined","clear","canceled","authenticate","saveUserToLocalStorage","error","set","key","JSON","stringify","res","get","user","parse"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getLogger } from '../core';\nimport { login as loginApi } from './authApi';\nimport {Storage} from \"@capacitor/storage\";\nimport {ConnectionStatus, Network} from \"@capacitor/network\";\n\nconst log = getLogger('AuthProvider');\n\ntype LoginFn = (username?: string, password?: string) => void;\n\nexport interface AuthState {\n  authenticationError: Error | null;\n  isAuthenticated: boolean;\n  isAuthenticating: boolean;\n  login?: LoginFn;\n  logout?: () => void;\n  pendingAuthentication?: boolean;\n  username?: string;\n  password?: string;\n  token: string;\n  networkStatus?: boolean;\n}\n\nconst initialState: AuthState = {\n  isAuthenticated: false,\n  isAuthenticating: false,\n  authenticationError: null,\n  pendingAuthentication: false,\n  token: '',\n};\n\nexport const AuthContext = React.createContext<AuthState>(initialState);\n\ninterface AuthProviderProps {\n  children: PropTypes.ReactNodeLike,\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [state, setState] = useState<AuthState>(initialState);\n  const { isAuthenticated, isAuthenticating, authenticationError, pendingAuthentication, token, networkStatus } = state;\n\n  const login = useCallback<LoginFn>(loginCallback, []);\n  const logout = useCallback<() => void>(logoutCallback, []);\n\n  useEffect(authenticationEffect, [pendingAuthentication]);\n  useEffect(() => {\n    function networkStatusChangedListener(status: ConnectionStatus){\n      log(\"status changed\");\n      setState({...state, networkStatus:status.connected});\n    }\n\n    log(\"useEffect\")\n    Network.addListener('networkStatusChange',\n        networkStatusChangedListener);\n\n    Network.getStatus().then(networkStatusChangedListener);\n  }, [networkStatus]);\n\n  //get the user from local storage, if it exists\n  if(!isAuthenticated)\n    getUserFromLocalStorage();\n\n  const value = { isAuthenticated, login, logout, isAuthenticating, authenticationError, token, networkStatus };\n  log('render');\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n\n  function loginCallback(username?: string, password?: string): void {\n    log('loginCallback');\n    setState({\n      ...state,\n      pendingAuthentication: true,\n      username,\n      password\n    });\n  }\n\n  function logoutCallback(): void {\n    log('logoutCallback');\n    setState({\n      ...state,\n      isAuthenticated: false,\n      username: undefined,\n      password: undefined,\n      token: \"\"\n    });\n\n    (async () => {\n      log(\"remove user from local storage\");\n      await Storage.clear();\n    })();\n  }\n\n  function authenticationEffect() {\n    log(\"authenticationEffect\");\n    let canceled = false;\n    authenticate();\n    return () => {\n      canceled = true;\n    }\n\n    async function authenticate() {\n      if (!pendingAuthentication) {\n        log('authenticate, !pendingAuthentication, return');\n        return;\n      }\n      try {\n        log('authenticate, pendingAuthentication true.');\n        setState({\n          ...state,\n          isAuthenticating: true,\n        });\n        const { username, password } = state;\n        if(!username || !password) {\n          log(\"authentication failed. Empty username or password\");\n          return;\n        }\n\n        const { token } = await loginApi(username, password);\n        if (canceled) {\n          return;\n        }\n        log('authenticate succeeded');\n        setState({\n          ...state,\n          token,\n          pendingAuthentication: false,\n          isAuthenticated: true,\n          isAuthenticating: false,\n        });\n\n        // save user in storage\n        saveUserToLocalStorage(username, password, token);\n\n      } catch (error) {\n        if (canceled) {\n          return;\n        }\n        log('authenticate failed');\n        setState({\n          ...state,\n          authenticationError: error,\n          pendingAuthentication: false,\n          isAuthenticating: false,\n        });\n      }\n    }\n  }\n\n  function saveUserToLocalStorage(username: string, password: string, token: string) {\n    (async () => {\n      log(\"save user to local storage\");\n\n\n      // Saving ({ key: string, value: string }) => Promise<void>\n      await Storage.set({\n        key: 'user',\n        value: JSON.stringify({\n          username, password, token,\n        })\n      });\n    })();\n  }\n\n  function getUserFromLocalStorage() {\n    if(!isAuthenticated)\n      (async () => {\n      log(\"get user from local storage\");\n\n      const res = await Storage.get({ key: 'user' });\n      if (res && res.value) {\n        const user = JSON.parse(res.value);\n        log('User found');\n        setState({...state,\n          isAuthenticated: true,\n          username: user.username,\n          password: user.password,\n          token: user.token });\n      } else {\n        log('User not found');\n      }\n    })();\n  }\n\n};\n"]},"metadata":{},"sourceType":"module"}